#!/usr/bin/env coffee

fs = require 'fs'

# https://github.com/caolan/async
async = require 'async'
# https://github.com/substack/node-optimist
optimist = require 'optimist'

argv = optimist.boolean('EFclqinsvx'.split '').argv

ARG = argv._

flags = ''
if argv.i
  flags += 'i'

# Where the file arguments start, as an index
# into the ARG array.
argind = 0

flavour = 'bre'
if argv.E
  flavour = 'ere'
if argv.F
  if argv.E
    console.warn "Cannot specify both -E and -F"
    process.exit 9
  flavour = 'fixie'

BREToRegExp = (pattern) ->
  # Convert single BRE token into JavaScript RegExp.
  # A string is returned.
  bre1token = (tok) ->
    # In POSIX RE in a bracket expression \ matches itself.
    if /^\[/.test tok
      tok = tok.replace /\\/, '\\\\'
    # In POSIX RE in a bracket expression an initial ]
    # or initial ^] is allowed.
    if /^\[\^?\]/.test tok
      return tok.replace /]/, '\\]'
    # Tokens for which we have to remove a leading backslash.
    if /^\\[(){}]$/.test tok
      return tok[1]
    # Tokens for which we have to add a leading backslash.
    if /^[+?|(){}]$/.test tok
      return '\\' + tok
    # Everything else is unchanged.
    return tok

  return pattern.replace ///
      \[\^?\]?[^]]*\] # Bracket Expression
    | \\.             # Backslash something
    | .               # Everything else
    ///g, bre1token

# Converts BRE or fixies into JavaScript RegExp.
transmogrify = (pattern) ->
  if flavour is 'ere'
    return pattern
  if flavour is 'bre'
    return BREToRegExp pattern
  if flavour is 'fixie'
    return pattern.replace /[\[\]^$()|{}\\.*+?]/g, (x) -> '\\' + x

# Process pattern options.

# List of patterns to match (each element is a RegExp object).
relist = []
patternl = (patterns) ->
  for pattern in patterns.split '\n'
    pattern1 pattern
pattern1 = (pattern) ->
  re = transmogrify pattern
  if argv.x
    if not /^\^/.test re
      re = '^' + re
    if not /\$$/.test re
      re = re + '$'
  try
    re = RegExp re, flags
  catch err
    console.warn String(err)
    process.exit 5
  relist.push re

if argv.e
  if typeof argv.e is 'string'
    argv.e = [ argv.e ]
  # Each -e option is a list of patterns separated by newline.
  for patterns in argv.e
    patternl patterns
if argv.f
  if typeof argv.f is 'string'
    argv.f = [ argv.f ]
  for fn in argv.f
    s = String(fs.readFileSync fn)
    s = s.replace /\n$/, ''
    patternl s
if not argv.e and not argv.f
  argind = 1
  patternl ARG[0]

# Result Code
#  0: at least one line selected
#  1: no lines selected
#  >1: error
# In fact we use bit 0 to track the lines selected, and bit 1
# to track errors.
rc = 1

file1 = (fn, cb) ->
  inp = fs.createReadStream fn
  inp.on 'error', (err) ->
    unless argv.s
      console.warn String(err)
      rc |= 2
      cb()
  stream1 inp, cb

# Return True if and only if the line is selected.
select = (line) ->
  # Test each RE one at a time. We can't optimise by making one
  # big RE because back-references won't work (at least, we can't
  # do that in the general case).
  for RE in relist
    if RE.test(line) != argv.v
      return true
  return false

stream1 = (inp, cb) ->
  buf = ''
  n = 0 # line number
  c = 0 # count of matches
  line1 = (line) ->
    n += 1
    if select line
      rc &= ~1
      if argv.q
        return cb 'early'
      if argv.l
        if inp.fd == 0
          console.log '(standard input)'
        else
          console.log inp.path
        return cb()
      if argv.c
        c += 1
        return
      if many
        process.stdout.write(inp.path+':')
      if argv.n
        process.stdout.write(String(n)+':')
      console.log line

  inp.on 'data', (data) ->
    buf += data
    if '\n' in buf
      lines = buf.split '\n'
      buf = lines.pop()
      for line in lines
        line1 line
  inp.on 'end', () ->
    if buf
      # Last line has no terminating newline.
      # Technically that means the input is a not a
      # POSIX test file. So I can do anything.
      process.stderr.write '\a'
      line1 buf
    if argv.c
      if many
        process.stdout.write(inp.path+':')
      console.log String(c)
    cb()

ARG = ARG[argind..]
if ARG.length > 0
  if ARG.length > 1
    many = true
  else
    many = false
  async.each ARG, file1, (err) ->
    if err is 'early'
      process.exit 0
    process.exit rc
else
  process.stdin.resume()
  async.each [process.stdin], stream1, () ->
    process.exit rc
